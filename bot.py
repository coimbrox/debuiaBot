import http
import discord
from discord.ext import commands
import random
import os
from dotenv import load_dotenv
import yt_dlp
import requests
import asyncio
from googletrans import Translator

from flask import Flask, json
from threading import Thread

app = Flask(__name__)


@app.route("/")
def home():
    return "Ol√°, o bot est√° online!"


def run():
    app.run(host="0.0.0.0", port=8080)


def keep_alive():
    t = Thread(target=run)
    t.start()


# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()
riot_api_key = os.getenv("RIOT_API_KEY")
# Adicione esta linha no topo do seu arquivo Python


# Configura√ß√£o de inten√ß√µes
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.members = True

# Cria uma inst√¢ncia do bot, SEM prefixo de comando
client = commands.Bot(command_prefix="!", intents=intents)
# A classe commands.Bot j√° cria uma CommandTree, ent√£o a linha 'tree = ...' foi removida.
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
    "AppleWebKit/537.36 (KHTML, like Gecko) "
    "Chrome/115.0 Safari/537.36",
    "Accept": "application/json, text/plain, */*",
    "Referer": "https://lolalytics.com/",
}


# Evento de inicializa√ß√£o
@client.event
async def on_ready():
    # Sincroniza os slash commands com o Discord usando client.tree
    await client.tree.sync()
    print(f"Bot logado como {client.user}")
    print("------")


# --- Comandos de texto e entretenimento (Convertidos para Slash Commands) ---


@client.tree.command(name="ping", description="Responde com Pong!")
async def ping(interaction: discord.Interaction):
    await interaction.response.send_message("Pong!")


@client.tree.command(name="dica", description="Fornece uma dica de League of Legends.")
async def dica(interaction: discord.Interaction):
    await interaction.response.send_message(
        "Lembre-se de sempre comprar wards para ter vis√£o do mapa!"
    )


@client.tree.command(
    name="curiosidade", description="Mostra uma curiosidade aleat√≥ria."
)
async def curiosidade(interaction: discord.Interaction):
    await interaction.response.defer()

    try:
        api_url = "https://uselessfacts.jsph.pl/random.json"
        response = requests.get(api_url)
        response.raise_for_status()

        fato_ingles = response.json()["text"]

        # Usando a biblioteca googletrans para traduzir
        translator = Translator()
        fato_traduzido = translator.translate(fato_ingles, dest="pt").text

        embed = discord.Embed(
            title="üß† Curiosidade do Dia üß†",
            description=fato_traduzido,  # Usando o texto traduzido
            color=discord.Color.teal(),
        )
        embed.set_footer(text="Fonte: uselessfacts.jsph.pl")

        await interaction.followup.send(embed=embed)

    except requests.exceptions.RequestException as err:
        print(f"Erro ao acessar a API de fatos: {err}")
        await interaction.followup.send(
            "Ocorreu um erro ao tentar buscar uma curiosidade."
        )
    except Exception as e:
        print(f"Ocorreu um erro inesperado: {e}")
        await interaction.followup.send("Ocorreu um erro ao processar a curiosidade.")


# Dicion√°rio de cidades e seus fusos hor√°rios (Timezones IANA)
cidades = {
    "Tokyo": "Asia/Tokyo",
    "Londres": "Europe/London",
    "Nova York": "America/New_York",
    "S√£o Paulo": "America/Sao_Paulo",
    "Dubai": "Asia/Dubai",
    "Sydney": "Australia/Sydney",
    "Paris": "Europe/Paris",
}


@client.tree.command(
    name="timeguesser",
    description="Tente adivinhar a hora atual em uma cidade aleat√≥ria.",
)
async def time_guesser(interaction: discord.Interaction):
    await interaction.response.defer()

    # Escolher uma cidade aleat√≥ria para o jogo
    cidade, timezone = random.choice(list(cidades.items()))

    # Enviar a pergunta para o usu√°rio
    embed_pergunta = discord.Embed(
        title="‚è∞ Timeguesser!",
        description=f"Qual √© a hora atual em **{cidade}**? (Responda em formato HH:MM)",
        color=discord.Color.purple(),
    )
    await interaction.followup.send(embed=embed_pergunta)

    def check(m):
        return m.author == interaction.user and m.channel == interaction.channel

    try:
        # Esperar pela resposta do usu√°rio por no m√°ximo 30 segundos
        resposta_usuario = await client.wait_for("message", check=check, timeout=30.0)

        palpite_texto = resposta_usuario.content
        palpite_valido = False

        try:
            hora_palpite, minuto_palpite = map(int, palpite_texto.split(":"))
            if 0 <= hora_palpite <= 23 and 0 <= minuto_palpite <= 59:
                palpite_valido = True
        except ValueError:
            pass

        if not palpite_valido:
            await interaction.channel.send(
                "Palpite inv√°lido. Por favor, use o formato HH:MM."
            )
            return

        # Obter a hora correta da API
        api_url = f"http://worldtimeapi.org/api/timezone/{timezone}"
        # Removendo as linhas de depura√ß√£o para um c√≥digo mais limpo
        response = requests.get(api_url)

        response.raise_for_status()

        dados_horario = response.json()
        hora_correta_iso = dados_horario["datetime"]
        hora_correta = hora_correta_iso[11:16]  # Extrai HH:MM

        hora_certa_hora, hora_certa_minuto = map(int, hora_correta.split(":"))

        # ... (O restante da l√≥gica de compara√ß√£o permanece o mesmo) ...
        # L√≥gica de compara√ß√£o (faltando no seu c√≥digo, mas crucial para o jogo)
        if hora_palpite == hora_certa_hora and minuto_palpite == hora_certa_minuto:
            resultado = f"üéâ **Parab√©ns!** Voc√™ acertou! A hora exata em {cidade} √© **{hora_correta}**."
        else:
            resultado = f"üòî Voc√™ errou. A hora exata em {cidade} √© **{hora_correta}**."

        await interaction.channel.send(resultado)

    except asyncio.TimeoutError:
        await interaction.channel.send("O tempo acabou! Ningu√©m respondeu a tempo.")
    except requests.exceptions.RequestException as err:
        print(f"Erro ao acessar a API de hor√°rios: {err}")
        await interaction.channel.send("Ocorreu um erro ao buscar a hora correta.")
    except Exception as e:
        print(f"Ocorreu um erro inesperado: {e}")
        await interaction.channel.send("Ocorreu um erro no jogo.")


@client.tree.command(
    name="dado", description="Rola um dado com o n√∫mero de lados especificado."
)
async def dado(interaction: discord.Interaction, lados: int):
    if lados < 1:
        await interaction.response.send_message(
            "O n√∫mero de lados deve ser pelo menos 1.", ephemeral=True
        )
        return

    resultado = random.randint(1, lados)
    await interaction.response.send_message(
        f"üé≤ Voc√™ rolou um dado de {lados} lados e tirou **{resultado}**!"
    )


respostas = [
    "Sim, com certeza.",
    "√â certo.",
    "Sem d√∫vida.",
    "Sim.",
    "Voc√™ pode contar com isso.",
    "Provavelmente.",
    "A resposta est√° nebulosa, tente novamente.",
    "Pergunte mais tarde.",
    "N√£o posso prever agora.",
    "N√£o conte com isso.",
    "Minhas fontes dizem n√£o.",
    "N√£o parece bom.",
    "Muito duvidoso.",
    "N√£o.",
]


@client.tree.command(
    name="8ball", description="Responde a uma pergunta com uma resposta aleat√≥ria."
)
async def magic_8ball(interaction: discord.Interaction, pergunta: str):
    await interaction.response.send_message(
        f"üé± **{pergunta}**\n**Resposta:** {random.choice(respostas)}"
    )


@client.tree.command(
    name="ship", description="Calcula a compatibilidade entre duas pessoas."
)
async def ship(interaction: discord.Interaction, nome1: str, nome2: str):
    await interaction.response.defer()

    # L√≥gica para criar o nome do navio
    metade1 = nome1[: len(nome1) // 2]
    metade2 = nome2[len(nome2) // 2 :]
    nome_do_navio = metade1 + metade2

    # Gerar uma porcentagem aleat√≥ria de 0 a 100
    compatibilidade = random.randint(0, 100)

    # Criar o embed para uma apresenta√ß√£o visual melhor
    embed = discord.Embed(
        title="üíò An√°lise de Compatibilidade üíò",
        description=f"O nome do navio √© **{nome_do_navio.capitalize()}**!",
        color=discord.Color.brand_red(),
    )
    embed.add_field(
        name="Pessoas",
        value=f"{nome1.capitalize()} e {nome2.capitalize()}",
        inline=False,
    )
    embed.add_field(
        name="N√≠vel de Compatibilidade", value=f"**{compatibilidade}%**", inline=False
    )

    embed.set_image(url="https://i.imgur.com/gYj7R2z.png")

    await interaction.followup.send(embed=embed)


@client.tree.command(
    name="lol-build", description="Sugere uma build para um campe√£o e lane."
)
async def lol_build(interaction: discord.Interaction, champion: str, lane: str):
    champion = champion.lower()
    lane = lane.lower()
    url = f"https://lolalytics.com/api/lol/{champion}/build/?lane={lane}&tier=platinum_plus&patch=14.14"

    try:
        response = requests.get(url, headers=HEADERS, timeout=10)
        if response.status_code != 200:
            await interaction.response.send_message(
                f"N√£o consegui buscar a build. Status code: {response.status_code}"
            )
            return

        data = response.json()

        if "items" not in data or "core" not in data["items"]:
            await interaction.response.send_message(
                f"N√£o encontrei dados para **{champion.capitalize()}** na lane **{lane}**."
            )
            return

        core_items = data["items"]["core"]["items"][:3]
        item_names = ", ".join([item["name"] for item in core_items])

        await interaction.response.send_message(
            f"**{champion.capitalize()} ({lane.capitalize()})**: {item_names}"
        )

    except Exception as e:
        await interaction.response.send_message(
            f"Erro ao buscar build para {champion} ({lane}): {e}"
        )


@client.tree.command(name="debuia", description="Exibe a frase de efeito do time.")
async def debuia(interaction: discord.Interaction):
    await interaction.response.send_message("Mesmo na derrota vamos debuiaaa!")


@client.tree.command(name="piada", description="Conta uma piada aleat√≥ria.")
async def piada(interaction: discord.Interaction):
    piadas = [
        "O que o tomate foi fazer no banco? Foi tirar um extrato!",
        "O que o pato disse para a pata? Vem Qu√°!",
        "Por que a aranha √© o animal mais inteligente da floresta? Porque ela tem uma teia de ideias!",
    ]
    piada_escolhida = random.choice(piadas)
    await interaction.response.send_message(piada_escolhida)


# --- Comandos de voz (m√∫sica) (Convertidos para Slash Commands) ---
# --- Comandos de voz (m√∫sica) (Convertidos para Slash Commands) ---

# Fila de m√∫sicas e outras vari√°veis de controle
FFMPEG_EXECUTABLE = (
    "/nix/store/15alrig3q4xjwfc3rbnsgj4bj29zn6ww-ffmpeg-7.1.1-bin/bin/ffmpeg"
)
# Ajuste a configura√ß√£o do yt_dlp
YTDL_OPTIONS = {
    "format": "bestaudio/best",
    "noplaylist": True,
    "default_search": "ytsearch",
    "quiet": True,
    "extract_flat": "in_playlist",
    "force-ipv4": True,
}

# Fila de m√∫sicas e outras vari√°veis de controle
song_queue = {}


class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get("title")
        self.url = data.get("url")

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=True):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(
            None,
            lambda: yt_dlp.YoutubeDL(YTDL_OPTIONS).extract_info(
                url, download=not stream
            ),
        )

        if "entries" in data:
            data = data["entries"][0]

        filename = (
            data["url"]
            if stream
            else yt_dlp.YoutubeDL(YTDL_OPTIONS).prepare_filename(data)
        )

        # O comando abaixo executa o yt-dlp e passa o √°udio para o ffmpeg via pipe
        # Isso √© o que resolve os problemas de streaming
        return cls(
            discord.FFmpegPCMAudio(
                filename,
                executable=FFMPEG_EXECUTABLE,
                before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
            ),
            data=data,
        )


@client.tree.command(name="sair", description="Desconecta o bot do canal de voz.")
async def sair(interaction: discord.Interaction):
    if interaction.guild.voice_client:
        await interaction.guild.voice_client.disconnect()
        # Limpa a fila ao sair, se ela existir
        if interaction.guild.id in song_queue:
            song_queue[interaction.guild.id] = []
        await interaction.response.send_message("Desconectado do canal de voz.")
    else:
        await interaction.response.send_message(
            "O bot n√£o est√° conectado a um canal de voz."
        )


# --- Fun√ß√£o para tocar a pr√≥xima m√∫sica (modificada) ---
async def play_next_async(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    if guild_id in song_queue and song_queue[guild_id]:
        next_song = song_queue[guild_id].pop(0)
        try:
            player = await YTDLSource.from_url(
                next_song["url"], loop=client.loop, stream=True
            )
            interaction.guild.voice_client.play(
                player,
                after=lambda e: (
                    client.loop.create_task(play_next_async(interaction))
                    if not e
                    else print("Erro na reprodu√ß√£o:", e)
                ),
            )
            await interaction.channel.send(f"Tocando agora: **{player.title}**")
        except Exception as e:
            print(f"Erro ao tentar reproduzir a m√∫sica: {e}")
            await interaction.channel.send(
                f"Ocorreu um erro ao tocar a m√∫sica: **{next_song['title']}**"
            )
            await play_next_async(interaction)


#
@client.tree.command(name="musica", description="Toca uma m√∫sica do YouTube.")
async def musica(interaction: discord.Interaction, url: str):
    await interaction.response.defer()
    if not interaction.user.voice:
        await interaction.followup.send("Entra na Desgra√ßa da sala pra pedir musica!")
        return

    voice_client = interaction.guild.voice_client
    if not voice_client:
        try:
            voice_client = await interaction.user.voice.channel.connect()
        except discord.ClientException:
            await interaction.followup.send("J√° estou conectado a um canal de voz.")
            return

    try:
        if voice_client.is_playing():
            if interaction.guild.id not in song_queue:
                song_queue[interaction.guild.id] = []
            song_queue[interaction.guild.id].append(
                {"url": url, "title": "Carregando..."}
            )
            await interaction.followup.send(f"M√∫sica adicionada √† fila.")
        else:
            player = await YTDLSource.from_url(url, loop=client.loop, stream=True)
            voice_client.play(
                player,
                after=lambda e: (
                    client.loop.create_task(play_next_async(interaction))
                    if not e
                    else print("Erro na reprodu√ß√£o:", e)
                ),
            )
            await interaction.followup.send(f"Tocando agora: **{player.title}**")

    except Exception as e:
        print(f"Ocorreu um erro no comando /musica: {e}")
        await interaction.followup.send(
            f"Ocorreu um erro ao tentar tocar a m√∫sica: {e}"
        )


@client.tree.command(name="parar", description="Para a m√∫sica e limpa a fila.")
async def parar(interaction: discord.Interaction):
    if interaction.guild.voice_client:
        interaction.guild.voice_client.stop()
        if interaction.guild.id in song_queue:
            song_queue[interaction.guild.id] = []
        await interaction.response.send_message("M√∫sica parada e fila limpa.")
    else:
        await interaction.response.send_message(
            "O bot n√£o est√° conectado a um canal de voz."
        )


@client.tree.command(name="skip", description="Pula para a pr√≥xima m√∫sica da fila.")
async def skip(interaction: discord.Interaction):
    if (
        interaction.guild.voice_client
        and interaction.guild.id in song_queue
        and song_queue[interaction.guild.id]
    ):
        await interaction.response.send_message("Pulando para a pr√≥xima m√∫sica.")
        interaction.guild.voice_client.stop()
    elif (
        interaction.guild.voice_client
        and interaction.guild.id in song_queue
        and not song_queue[interaction.guild.id]
    ):
        await interaction.response.send_message(
            "Se n√£o tem m√∫sica, vc que que eu pule oq? sua m√£e?"
        )
    else:
        await interaction.response.send_message(
            "O bot n√£o est√° tocando m√∫sica ou n√£o est√° em um canal de voz."
        )


# --- Comandos de integra√ß√£o com a API da Riot (Convertidos para Slash Commands) ---


@client.tree.command(
    name="historicolol",
    description="Mostra o hist√≥rico das 5 partidas mais recentes de um invocador.",
)
async def lol_match(interaction: discord.Interaction, summoner_name: str):
    summoner_url = f"https://br1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{summoner_name}?api_key={riot_api_key}"

    await interaction.response.send_message(
        f"Buscando as √∫ltimas 5 partidas de **{summoner_name}**..."
    )

    try:
        response = requests.get(summoner_url)
        response.raise_for_status()
        summoner_data = response.json()

        puuid = summoner_data["puuid"]

        match_history_url = f"https://americas.api.riotgames.com/lol/match/v5/matches/by-puuid/{puuid}/ids?start=0&count=5&api_key={riot_api_key}"
        match_history_response = requests.get(match_history_url)
        match_ids = match_history_response.json()

        for match_id in match_ids:
            match_url = f"https://americas.api.riotgames.com/lol/match/v5/matches/{match_id}?api_key={riot_api_key}"
            match_response = requests.get(match_url)
            match_data = match_response.json()

            for participant in match_data["info"]["participants"]:
                if participant["puuid"] == puuid:
                    jogador = participant
                    break

            outcome = "Vit√≥ria" if jogador["win"] else "Derrota"
            champion = jogador["championName"]
            kda = f"{jogador['kills']}/{jogador['deaths']}/{jogador['assists']}"

            await interaction.channel.send(
                f"**{champion}** - **{outcome}** - KDA: **{kda}**"
            )

    except requests.exceptions.HTTPError as err:
        if response.status_code == 404:
            await interaction.channel.send(
                f"Invocador **{summoner_name}** n√£o encontrado."
            )
        else:
            await interaction.channel.send(
                f"Ocorreu um erro na requisi√ß√£o √† API da Riot: {err}"
            )
    except Exception as e:
        await interaction.channel.send(f"Ocorreu um erro: {e}")


@client.tree.command(name="elolol", description="Retorna o elo e rank de um jogador.")
async def lol_rank(interaction: discord.Interaction, summoner_name: str):
    summoner_url = f"https://br1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{summoner_name}?api_key={riot_api_key}"

    await interaction.response.defer()  # Usado para evitar timeout

    try:
        response = requests.get(summoner_url)
        response.raise_for_status()
        summoner_data = response.json()

        summoner_id = summoner_data["id"]

        rank_url = f"https://br1.api.riotgames.com/lol/league/v4/entries/by-summoner/{summoner_id}?api_key={riot_api_key}"
        rank_response = requests.get(rank_url)
        rank_data = rank_response.json()

        if not rank_data:
            await interaction.followup.send(
                f"O invocador **{summoner_name}** n√£o tem rank em filas ranqueadas."
            )
        else:
            rank_info = rank_data[0]
            tier = rank_info["tier"].capitalize()
            rank = rank_info["rank"]
            lp = rank_info["leaguePoints"]
            wins = rank_info["wins"]
            losses = rank_info["losses"]

            await interaction.followup.send(
                f"**{summoner_name}** est√° em **{tier} {rank}** com **{lp} LP**. ({wins} Vit√≥rias / {losses} Derrotas)"
            )

    except requests.exceptions.HTTPError as err:
        if response.status_code == 404:
            await interaction.followup.send(
                f"Invocador **{summoner_name}** n√£o encontrado."
            )
        else:
            await interaction.followup.send(
                f"Ocorreu um erro na requisi√ß√£o √† API da Riot: {err}"
            )
    except Exception as e:
        await interaction.followup.send(f"Ocorreu um erro: {e}")


@client.tree.command(
    name="lol-live",
    description="Mostra os jogadores e campe√µes de uma partida em andamento.",
)
async def lol_live(interaction: discord.Interaction, summoner_name: str):
    summoner_url = f"https://br1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{summoner_name}?api_key={riot_api_key}"

    await interaction.response.defer()  # Usado para evitar timeout

    try:
        response = requests.get(summoner_url)
        response.raise_for_status()
        summoner_data = response.json()

        summoner_id = summoner_data["id"]

        live_game_url = f"https://br1.api.riotgames.com/lol/spectator/v4/active-games/by-summoner/{summoner_id}?api_key={riot_api_key}"
        live_game_response = requests.get(live_game_url)

        if live_game_response.status_code == 404:
            await interaction.followup.send(
                f"O invocador **{summoner_name}** n√£o est√° em uma partida ativa."
            )
            return

        live_game_response.raise_for_status()
        game_data = live_game_response.json()

        game_mode = game_data["gameMode"]

        blue_team = ""
        red_team = ""

        for participant in game_data["participants"]:
            player_name = participant["summonerName"]
            champion_name = participant["championName"]

            if participant["teamId"] == 100:
                blue_team += f" - {player_name} ({champion_name})\n"
            else:
                red_team += f" - {player_name} ({champion_name})\n"

        embed = discord.Embed(
            title=f"Partida em Andamento ({game_mode})", color=discord.Color.blue()
        )
        embed.add_field(name="Time Azul", value=blue_team, inline=False)
        embed.add_field(name="Time Vermelho", value=red_team, inline=False)

        await interaction.followup.send(embed=embed)

    except requests.exceptions.HTTPError as err:
        if response.status_code == 404:
            await interaction.followup.send(
                f"Invocador **{summoner_name}** n√£o encontrado."
            )
        else:
            await interaction.followup.send(
                f"Ocorreu um erro na requisi√ß√£o √† API da Riot: {err}"
            )
    except Exception as e:
        await interaction.followup.send(f"Ocorreu um erro: {e}")


@client.tree.command(
    name="comandos", description="Exibe a lista de todos os comandos do bot."
)
async def comandos(interaction: discord.Interaction):
    embed = discord.Embed(
        title="ü§ñ Comandos do Bot Debuia Team",
        description="Lista de todas as funcionalidades dispon√≠veis.",
        color=discord.Color.gold(),
    )

    embed.add_field(
        name="üéÆ Comandos de League of Legends",
        value=(
            "**`/elolol <nome>`**\n"
            "   - Retorna o elo e rank de um jogador.\n"
            "**`/historicolol <nome>`**\n"
            "   - Mostra o hist√≥rico das 5 partidas mais recentes.\n"
            "**`/lol-live <nome>`**\n"
            "   - Mostra os jogadores e campe√µes de uma partida em andamento."
        ),
        inline=False,
    )

    embed.add_field(
        name="üéµ Comandos de M√∫sica",
        value=(
            "**`/entrar`**\n"
            "   - Conecta o bot ao seu canal de voz.\n"
            "**`/sair`**\n"
            "   - Desconecta o bot do canal de voz.\n"
            "**`/tocar <url>`**\n"
            "   - Toca uma m√∫sica do YouTube."
        ),
        inline=False,
    )

    embed.add_field(
        name="üé≤ Comandos de Entretenimento",
        value=(
            "**`/ping`**\n"
            "   - Responde com `Pong!`.\n"
            "**`/piada`**\n"
            "   - Conta uma piada aleat√≥ria.\n"
            "**`/debuia`**\n"
            "   - Exibe a frase de efeito do time.\n"
            "**`/lol-build`**\n"
            "   - Fornece um exemplo de build para um campe√£o."
        ),
        inline=False,
    )

    await interaction.response.send_message(embed=embed)


keep_alive()
# Rodar o bot
token = os.getenv("DISCORD_TOKEN")
client.run(token)
